# SOF


[2021-09-13.00]
Workarounds for cores produced by wrong settings of Dot-Ofsset (w_doto, b_doto)
outside of the current line.


Reproducing the error:

(1) Fill Paragraph (Esc-q)

(2) Undo (Ctrl+Shift+_)

This confuses the doto settings: MicroEMACS always assumes 0 <= doto <= l_used.

With -DJES_UNSEC_CODE the errors could be reproduced.

Furthermore fill-paragraph does not work correctly e.g. when used in som TeX-documents.


[2021-10-05.00]

Next steps to repair the (w|b)_doto-Problem:

(1) Introduce (get|set)_(b|w)_doto Makros and use the througout the code: Done.

(2) Test uemacs with this modification: Done.

(3) Fix wrong (w|b)_doto-Settings in the (get|set)_(b|w)_doto Macros and trace wrong settings: Done.

(4) Check that TRC in line.c isn't triggered any more: Done.

(5) Remove Fix and TRC in line.c: Done.

(6) Enable the other platforms: Done

(7) Introduce get/set-Logic and repair-code of the dot-code for the mark code as well: Might be unneccesary

(8) FIX THIS ERROR: `TRC (../src/undo.c/131): set_w_doto(): Too large doto: 156. REWRITTEN TO: 155.'
    - This seems to be an error in the fillpara function in word.c
    - Introduced the trParFill() in random.c which is an unduable replacement.
    Done

(9) The "indent-region" function is also undoable: Must be repaired: Done.

(10) Introduce a goto(b|e)ofrp(): Goto(Beginning|End)ofRawParagraph and
     a trRParFill(): Raw paragraphs are limited by '\r' only. DONE: Not
     necessary, simply set the environment variable $wchars to a string
     containing all charcters thet will be recogbnized as parts of
     words, e.g.:

    set $wchars "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+{}[]\\|;:\"'<>,./?~`"

===>

(11) _goto-eop goes to the end of the next paragrapg, when point is at
    the last letter of a paragraph:

    lastword.   or   lastword
           ^                ^

(12) Make filter-buffer redoable and introduce filter-region.


[2021-11-07.00]

The automatic reformatting has destroyed some of the very nice formatted
comments in the original code: This has to be recreated!

These files have been reviewed:

File Name     Formated Comments   Func. Proto.    Init.   Warnings  EOF
========================================================================
src/abbrev.c    X                   X                       X         X
src/aix.c       X                                                     X
src/amigados.c  X                                                     X
src/aosvs.c     X                                                     X
src/ansi.c      X                                                     X
src/basic.c     X                   X                                 X
src/bind.c      X                   X                       X         X
src/buffer.c    X                   X                                 X
src/char.c      X                   X                                 X
src/cmdfix.c    X                                                     X
src/crypt.c     X                   X                                 X
src/dg10.c      X                                                     X
src/display.c   X                   X                       X         X
src/dolock.c    X                   X                                 X
src/eval.c      X                   X                       X         X
src/exec.c      X                   X               X       X         X
src/file.c      X                   X                       X         X
src/fileio.c    X                   X                                 X
src/fmr.c       X                                                     X
src/fmrdos.c    X                                                     X
src/history.c   X                   X               X       X         X
src/hp110.c     X                                                     X
src/hp150.c     X                                                     X
src/i55.c       X                                                     X
src/ibmpc.c     X                   X               X       X         X
src/input.c     X                   X               X       X         X
src/isearch.c   X                   X               X       X         X
src/keyboard.c  X                   X               X       X         X
src/line.c      X                   X               X       X         X
src/lock.c      X                   X               X       X         X
src/main.c      X                   X                       X         X
src/mouse.c     X                   X                       X         X
src/mpe.c       X                                                     X
src/msdos.c     X                   X               X       X         X
src/mswdisp.c   X                                                     X
src/mswdrv.c    X                                                     X
src/mswemacs.c  X                                                     X
src/mswexec.c   X                                                     X
src/mswfile.c   X                                                     X
src/mswfont.c   X                                                     X
src/mswinput.c  X                                                     X
src/mswmem.c    X                                                     X
src/mswmenu.c   X                                                     X
src/mswsys.c    X                                                     X
src/nec.c       X                                                     X
src/necdos.c    X                                                     X
src/nt.c        X                                                     X
src/ntconio.c   X                                                     X
src/os2.c       X                                                     X
src/os2npm.c    X                                                     X
src/posix.c     X                                                     X
src/random.c    X                   X                       X         X
src/region.c    X                   X                                 X
src/replace.c   X                   X                       X         X
src/screen.c    X                   X                       X         X
src/search.c    X                   X                       X         X
src/smg.c       X                                                     X /* REFORMAT!  */
src/st52.c      X                                                     X
src/tags.c      X                   X                                 X
src/tcap.c      X                                                     X
src/tipc.c      X                                                     X
src/tos.c       X                                                     X
src/undo.c      X                   X                                 X
src/unix.c      X                   X                       X         X
src/vms.c       X                                                     X /* REFORMAT!  */
src/vt52.c      X                                                     X
src/window.c    X                                                     X
src/wmcs.c      X                                                     X
src/word.c      X                   X                                 X
src/xp.c        X                                                     X
src/xpconio.c   X                                                     X
src/xvt.c       X                                                     X
src/xvtdos.c    X                                                     X
src/z309c       X                                                     X
........................................................................
h/dutch.h       X                                                     X
h/ebind.h       X                                                     X
h/edef.h        X                                                     X
h/efunc.h       X                                                     X
h/elang.h       X                                                     X
h/english.h     X                                                     X
h/epath.h       X                                                     X
h/eproto.h      X                                                     X
h/estruct.h     X                                                     X
h/evar.h        X                                                     X
h/french.h      X                                                     X
h/frenchis.h    X                                                     X
h/german.h      X                                                     X
h/japan.h       X                                                     X
h/latin.h       X                                                     X
h/mswhelp.h     X                                                     X
h/mswin.h       X                                                     X
h/mswmenu.h     X                                                     X
h/mswrid.h      X                                                     X
h/platin.h      X                                                     X
h/resource.h    X                                                     X
h/spanish.h     X                                                     X
............................................................................


[2023-07-13.00]
- Substitute `void *' with VOIDP  (\/)
- edef.h nachschauen: Das wird in search.c verwendet: Ist da signed/unsigned wichtig?   (\/)
- Fix compiler warnings.          (\/)
- Compiles without warnings on linux (gcc), FreeBSD (clan, gcc), OpenBSD (clang),
  Solaris SPARC (gcc)             (\/)
- static returned buffer in eval.c:gtfun()  (\/)
- Macro ISSPACE                   (\/)
- replace *all* estruct.h files   (\/)
- Include Martin Vorlaender's VMS changes:
  + file.c:getfile(): Do a strdup of `fname'
  + smg.c:            Reformat.
  + vms.c:            Reformat.
  + The functions grabnowait(), grabwait() added to eproto.h have
    different return types (int / unsigned char) for different
    platforms: This is an *error* which needs to be fixed.
- continue in:
  + Comments
  + PCDOS with Borland C++: issue with help-system:
    - Call help
    - Use arrow key
    - You are catched in a macro-loop
    - Does not occur on MicroEMACS 4.0
    - We test these versions:

      (a) ue400dev.zip (2005)
      (b) emacs5.zip (2009): Daniel_Michael_Lawrence/http:@@www.aquest.com/downloads
      (c) https:@@github.com@pmachapman@memacs.tar.xz --- pmachapman.zip (2018)
      (d) master.zip: Archive created out of the current (2023-07-19) master branch.

      Version (c) Seems to be younger than Version (b).

      ( i)  (a): The Error does not occur.
      (ii)  (c): Compiled with a modified (a) estruct.h: The error does
                not occur.
      (iii) (d): Compiled with a modified (a) estruct.h: The error does
                not occur.

    - The error can be reproduced on UNIX(FreeBSD): it occurs in branch
      "fixes" but not in branch "master")

      Next step: ?Bisecvtion in "fixes".

    - emacs.fixes_2023-04-03_GOOD
      emacs.fixes_2023-07-13_BAD

      commit a15abcc4adcb9958f047a7fc023ce6e920ffdaeb
      Author: Dr. Joachim Schneider <jesmx@hal.rhein-neckar.de>
      Date:   Thu Jul 13 19:39:27 2023 +0200

        Removed all warnings.

      commit 869090a8fd95b287b433d0077b7c088c54635ed1
      Author: Dr. Joachim Schneider <jesmx@hal.rhein-neckar.de>
      Date:   Mon Apr 3 11:37:56 2023 +0200

        Ich bin gerade am reparieren, will den derzeitigen Stand aber sichern.

    - Regression found:

      $ git diff ../src/eval.c
      diff --git a/ue500/src/eval.c b/ue500/src/eval.c
      index 0854636..00d23f5 100644
      --- a/ue500/src/eval.c
      +++ b/ue500/src/eval.c
      @@ -81,9 +81,9 @@ CONST char  *fname;     /* name of function to evaluate */
           register int  arg     = 0;          /* value of some arguments    */
           BUFFER        *bp     = NULL;       /* scratch buffer pointer     */
           /* ==== These might be part of the (static allocated) result ==== */
      -    static char   arg1[NSTRING];        /* value of first argument    */
      -    static char   arg2[NSTRING];        /* value of second argument   */
      -    static char   arg3[NSTRING];        /* value of third argument    */
      +    char          arg1[NSTRING];        /* value of first argument    */
      +    char          arg2[NSTRING];        /* value of second argument   */
      +    char          arg3[NSTRING];        /* value of third argument    */
           static char   result[2 * NSTRING];  /* string result              */
           /* ============================================================== */

[2023-07-20.00]
New TODO's
* Check eval.c:gtfun(): why arg{1,2,3} must not be static.  (\/)
* Why has the size grown so much:
  548512 emacs.fixes_2023-04-03_GOOD
  840016 emacs.fixes_2023-07-13_BAD
  ===> The main difference seem to be that we initialize much more
       function local variables.

[2023-07-26.00]
* pcdos/turbo: Still does not work:
  - After using help system emacs hangs.

[2023-07-27.00]
* Test New String Functions: ../Temp/NewStringFunctions/random.c  ) (\/)
  ===> Switched to the new simplified versions now.
* Test DOS-Version after rval hide has been resolved                (\/)
  ===> Problem is still there.
* Check all static returns in eval.c

[2023-07-28.00]
Status of pcdos/turbo error, which is reproduced on DOS by
o set HOME=<Path To CMD folder>
o Start emacs
o Start Help System
o Navigate around
o Leave Help System: Now emacs hangs.

- It exists on DOSEMU and on DOSBOX.
- It does *not* occur with UE312DEV.
- It occurs on UE400DEV and later.
- Does it depend on the macros in CMD folder?

+ It does *not* occur on UE400DEV when using the *original* estruct.h:
  In the previous experiments we used a modified PMACHAPMAN estruct.h

+ They differ in

  BAD:
    NLINE   = 512
    NSTRING = 512
    NPAT    = 512

  GOOD:
    NLINE   = 256
    NSTRING = 128
    NPAT    = 128

+ With these settings the *latest* UE500DEV (i.e. UE230728) works!

+ This strongly suggests, that there is a memory overwrite caused by
  use of *unsafe* library functions like (x)strcpy and sprintf.


[2023-07-28.00]

Number of strcpy:   457
Number of sprintf:  25

Plan:

- We repair the sprintf's manually by substituting them with xsnprintf's whereever possible.

- We introduce an XSTRCPY - Macro which is substituded for xstrcpy:

  /* SFSTRCPY:
   *  if size .GE. 0 copy src to dst usling xstrlcpy(dst, src, sizeof(dst))
   *  else           copy src to dst usling xstrcpy(dst, src) and log
   *                 a warning message.
   */
  extern char *sfstrcpy_(char *dst, int dst_size, const char *src, const char *file, int line);

#define XSTRCPY(dst, src)  sfstrcpy_((dst), IS_ARRAY((dst)) ? sizeof((dst)) : (-1), (src), __FILE__, __LINE__)

- Some occurances of xstrcpy can't be replaced by XSTRCPY because dst
  is not an Lvalue: We use xstrcpy there:
  ===> These must be reviewed.

- Handle bytecopy: Is safe but might be expressed with strlcpy

- Handle strcat: Replace strcat by XSTRCAT.


[2023-07-30.00]

Next steps to handle the (hidden) overwrite:

- Substitute strcat by xstrcat: Overlapping regions are OK                (\/)

- Substitute xstrcat by XSTRCAT.                                          (\/)

- XSTRCPY and XSTRCAT generate tarce warnings ... unsafe ... when dst in
  not an array: Sustitute these occurances with xstrcpy and xstrcat.      (\/)

- Replace --- if possible --- `strncat' by `strlcat'.

- *Manually* analyze the remaining `sprintf', `xstrcpy' and `xstrcat'
  occurances.

- Manually check *all* occurences of XSTR{CPY,CAT} in the OS-Dependent
  modules like

  vms.c, os2.c, aosvs.c ,nt.c amigados.c, ...

  Workaround: Substitute the lower case versions there, to not
  produce broken code.                                                    (\/)

- Remove *all* warnings in msdos.c and ibmpc.c                            (\/)

- Initialize *all* variables in msdos.c and ibmpc.c                       (\/)
  ===> Did not help

- Bisect the F10 handler in ehelp.cmd

- Repair all doubtful statically returned strings in eval.c (the macro
  processing module) by optionally introducing the static stacks.

- From step to step check with PCDOS/TURBO build.


The error is still there and it is an overwrite:

TRC (..\..\src\line.c/305): lgetcp_(): Read at Buffer Boundry: l_size_ = 64, l_used_ = 54, l_text_[54] = ' '
TRC (..\..\src\line.c/305): lgetcp_(): Read at Buffer Boundry: l_size_ = 64, l_used_ = 55, l_text_[55] = ' '
TRC (..\..\src\line.c/305): lgetcp_(): Read at Buffer Boundry: l_size_ = 64, l_used_ = 56, l_text_[56] = ' '
TRC (..\..\src\display.c/827): lp->l_used_ = -1822, lp->lsize_ = -22013
File: ..\..\src\display.c, Line: 827
	Assertion `lp->l_used_ <= lp->l_size_' failed!
OS: `Invalid argument
'
--- abort ...


[2023-07-30.01]
The overwrite is not observalble if we set NSTRING from 512 down to 128
(the previous UE312 value).

- Additional steps:
  + Check if reducing NSTRING in msdos.c only eliminates the error:
    ===> NO


[2023-07-31.00]

* Indeed the DOS-Error is there since (at least) UE212: Redefining
  NSTRING from 128 to 512 in estruct.h reproduces the error!

* The Error does not vanish when one comments out the VGA/EGA related
  code in the EHELP.CMD.


[2023-08-01.00]

DOS-Error: SOLVED! It is a Stack Overflow!

* Enlardged NSTRING to 16834, compliled on Linux run it under
  `valgrind': No Problems

* Set the `-N' flag in the compile staement inside the makefile (before
  it was `-N-': Switch off stack checking).

  Compiled an run UE312 with

  - NSTRING = 512:  Stack Overflow
  - NSTRING = 128:  No Error --- everything is OK


[2023-08-01.01]

Next Steps:

- Repair all doubtful statically returned strings in eval.c (the macro
  processing module) by optionally introducing the static stacks.
  ===> Not solved in this way instead using STATIC_STR_RET-Macros (\/)

- Implement xstrdup with the function already available           (\/)

- Substitute `free' with `FREE'

- Check modifications in DOS-Compile:                             (\/)
  + ctime()
  + strrev()

- Handle bytecopy: Is safe but might be expressed with strlcpy    (\/)

- Do an `#ifdef MSDOS' or somehow increase the Stack-Size in DOS. (\/)

  BAD:
    NLINE   = 512
    NSTRING = 512
    NPAT    = 512

  GOOD:
    NLINE   = 256
    NSTRING = 128
    NPAT    = 128

- Reduce the size of the buffer for ctime() in msdos,c (it was    (\/)
  increased from 16 to 256 for debugging purposes).


[2023-08-06.00]
Next Steps:
- msdos.c and ibmpc.c: Check comments.                            (\/)
- Check if `PASCAL NEAR' reduces pcdos/turbo code size            (\/)
  ===> Yes, but only about 2500 bytes.
- Check *all* well formatted special comments.                    (\/)
- Build on AIX
- Build on Windows XP.
- Substitute `free' with `FREE'
- Replace --- if possible --- `strncat' by `strlcat'.
- *Manually* analyze the remaining `sprintf', `xstrcpy' and `xstrcat'
  occurances.
- Build with C++-Compiler on
  + MSDOS                                                         (\/)
  + FreeBSD
  + Linux
- Identify functions which could be declared module local (`static')
- Sort eproto.h declarations and add platform specific sections therein.


[2023-08-08.00]

<http://odl.sysworks.biz/disk$axpdocjun032/progtool/cpqc65/5492p017.htm>

4.4 Storage-Class Modifiers

Compaq C for OpenVMS Systems provides support for the storage-class
modifiers noshare , readonly , and _align as VAX C keywords. The
recognition of these three storage-class modifiers as keywords (along
with the other VAX C specific keywords) is controlled by a combination
of the compiler mode and the /ACCEPT command-line qualifier. The
default behavior on OpenVMS systems is for the compiler to recognize
these storage-class modifiers as keywords in the VAX C compatibility
mode and relaxed ANSI C mode (assuming that /ACCEPT=NOVAX_KEYWORDS is
not also specified.) Conversely, they are not recognized by default in
all other modes unless overridden by /ACCEPT=VAX_KEYWORDS.

Compaq C also provides the __inline , __forceinline and __align
storage-class modifiers. These are recognized as valid keywords in all
compiler modes on all platforms. They are in the namespace reserved to
the C implementation, so it is not necessary to allow them to be
treated as user-declared identifiers. They have the same effects on all
platforms, except that on OpenVMS VAX systems, the __forceinline
modifier does not cause any more inlining than the __inline modifier
does.

Compaq C also provides the inline storage-class modifier. This modifier
is supported in relaxed ANSI C mode (/STANDARD=RELAXED_ANSI89) or if
the /ACCEPT=C99_KEYWORDS or /ACCEPT=GCCINLINE qualifier is specified.

For additional information about the __inline , __forceinline , __align
, and inline storage-class modifiers, see the Compaq C Language
Reference Manual.

You can use a storage-class specifier and a storage-class modifier in
any order; usually, the modifier is placed after the specifier in the
source code. For example:


extern  noshare  int  x;

   /*  Or, equivalently...*/

int  noshare  extern  x;

The following sections describe each of the Compaq C storage-class
modifiers.

4.4.1 The noshare Modifier

The noshare storage-class modifier assigns the attribute NOSHR to the
program section of the variable. Use this modifier to allow other
programs, used as shareable images, to have a copy of the variable's
psect without the shareable images changing the variable's value in the
original psect.

When a variable is declared with the noshare modifier and a shared
image that has been linked to your program refers to that variable, a
copy is made of the variable's original psect to a new psect in the
other image. The other program may alter the value of that variable
within the local psect without changing the value still stored in the
psect of the original program.

For example, if you need to establish a set of data that will be used
by several programs to initialize local data sets, then declare the
external variables using the noshare specifier in a Compaq C program.
Each program receives a copy of the original data set to manipulate,
but the original data set remains for the next program to use. If you
define the data as extern without the noshare modifier, a copy of the
psect of that variable is not made; each program would be allowed
access to the original data set, and the initial values would be lost
as each program stores the values for the data in the psect. If the
data is declared as const or readonly , each program is able to access
the original data set, but none of the programs can then change the
values.

You can use the noshare modifier with the static , extern , globaldef ,
and globaldef {"name"} storage-class specifiers. For more information
about the possible combinations of specifiers and modifiers, and the
effects of the storage-class modifiers on program-section attributes,
see Section 4.8.

You can use noshare alone, which implies an external definition of
storage class extern . Also, when declaring variables using the extern
and globaldef {"name"} storage-class specifiers, you can use noshare ,
const , and readonly , together, in the declaration. If you declare
variables using the static or the globaldef specifiers, and you use
both of the modifiers in the declaration, the compiler ignores noshare
and accepts const or readonly .

4.4.2 The readonly Modifier

The readonly storage-class modifier, like the const data-type
qualifier, assigns the NOWRT attribute to the variable's program
section; if used with the static or globaldef specifier, the variable
is stored in the $CODE psect, which has the NOWRT attribute by default.

You can use both the readonly and const modifiers with the static ,
extern , globaldef , and globaldef {"psect"} storage-class specifiers.

In addition, both the readonly modifier and the const modifier can be
used alone. When you specify these modifiers alone, an external
definition of storage class extern is implied.

The const modifier restricts access to data in the same manner as the
readonly modifier. However, in the declaration of a pointer, the
readonly modifier cannot appear between the asterisk and the pointer
variable to which it applies.

The following example shows the similarity between the const and
readonly modifiers. In both instances, the point variable represents a
constant pointer to a nonconstant integer.


readonly int * point;

int * const point;

Note

For new program development, DIGITAL recommends that you use the const
modifier, because const is ANSI C compliant and readonly is not.


[2023-08-09.00]
[2023-08-10.00]
[2023-08-11.00]
[2023-08-12.00]
[2023-08-13.00]


Next Steps

(A) Allow to compile with C++ for improved compiler checks:

    + foreach file needed to compile on UNIX, MSDOS, VMS do
        - Convert all K&R definitions to the P#_-Format (which
          expands to ANSI-C definitions with PROTO set.).
        - While reviewing the files repair broken comments
        - Current File is: src/...
      done
      ===> DONE

    + #define SIZEOF(x) ( (int)sizeof((x)) )
      Substitute sizeof ---> SIZEOF in *all* files

    + Remove all other C++ Warnings

(B) Create a simple C-program to extract comments out of ANSI-C files.
    Sample output:

    --------------------------------------------------------------------
    Comment Nr ####, File: ##########, Line: ####
    --------------------------------------------------------------------
    /* This is a sample comment
          */
    --------------------------------------------------------------------

    Use this program to check all comments of the files processed in (A).

    ===> Has been done manually.

    Repair the comments in all remaining files. (\/)


(C) Additionally:

    - Check the execprog definitions:

      ue500/src/fmrdos.c:PASCAL NEAR execprog(cmd)
      ue500/src/msdos.c:static int PASCAL NEAR execprog P1_(CONST char *, cmd)
      ue500/src/necdos.c:PASCAL NEAR execprog(cmd)
      ue500/src/nt.c:execprog(char *cmd)
      ue500/src/os2.c:execprog(char *cmd)
      ue500/src/xp.c:execprog(char *cmd)
      ue500/src/xvtdos.c:int PASCAL NEAR execprog(cmd)

    - Re-Check the int/char case with VMS
    - NFUNCS defined in incompatible ways.    (\/)


[2023-08-27.00]
- All messed up comments in *.c *.h have been repaired!
- Reformatted smg.c and vms.c using FreeBSD's indent with this config file

  $ cat ~/.indent.pro
  -nfc1 -nfcb -sc -nut -i4 -br -npsl -di10

  o This leaves Box Comments `/*=, /*-, /**' and Block-Comments `/*\n' untouched!
  o It does not remove existing `\t'-characters everywhere!


[2023-08-27.01]
NFUNCS:

europa:@/ue500/h> grep NFUNCS *
edef.h:DCLDEF NOSHARE int            numfunc             INIT_(NFUNCS);        /* number of bindable functions     */
efunc.h:#define NFUNCS  ( sizeof (names) / sizeof (names[0]) - 1 )
evar.h:# define NFUNCS ( sizeof (funcs) / sizeof (funcs[0]) )

* efunc.h may be included everywhere:
  NFUNCS is correctly declared there as the last entry of names is a `NULL'

* evar.h is *only* included in eval.c
  NFUNCS is correctly declared there as the last entry of funcs is a valid name.

  These are the user functions to be used in macros like `&and'

* The functions in efunc.h are the callable C-Functions:

  europa:@/ue500/h> grep upperregion *
  ebind.h:    { CTLX|CTRL|'U',      BINDFNC, { upperregion } },
  efunc.h:    { "case-region-upper", upperregion },
  eproto.h:EXTERN int PASCAL NEAR upperregion DCL((int f, int n));

* efunc.c is *NOT* included in eval.c

===> There is no conflict
===> It is correct, that the *.h don't include mutually.


[2023-08-27.02]
TODO-List

- Allow to compile with C++ for improved compiler checks:

  + foreach file needed to compile on UNIX, MSDOS, VMS do
      - Convert all K&R definitions to the P#_-Format (which
        expands to ANSI-C definitions with PROTO set.).
      - While reviewing the files repair broken comments
      - Current File is: src/basic.c
    done

  + #define SIZEOF(x) ( (int)sizeof((x)) )
    Substitute sizeof ---> SIZEOF in *all* files

  + Remove all other C++ Warnings

- Rework `room'

- Substitute malloc/realloc/calloc with the corresponding `room'-calls

- Substitute `free' with `FREE'

- Introduce the array-checks proposed by DDL for the windows port:
  See the introductory comments in the source files for Windows XP.

- Re-Check the int/char case with VMS

- Build on Windows XP.

- Build on AIX

- Sort Variables in edef.h

- Remove literal sizes in edef.h

- Document installation in README.md

- Document improvements in README.md

- In smg.c and vms.c change block comments from
    /*
        <something>
    */
  to
    /*
     *  <something>
     */

- Change all Block comments from
    /* Start of thest
     * more text
     */
  to
    /**
     * Start of thest
     * more text
     */
  Then they are box comments for indent which aren't touched.

- Check the execprog definitions:

  ue500/src/fmrdos.c:PASCAL NEAR execprog(cmd)
  ue500/src/msdos.c:static int PASCAL NEAR execprog P1_(CONST char *, cmd)
  ue500/src/necdos.c:PASCAL NEAR execprog(cmd)
  ue500/src/nt.c:execprog(char *cmd)
  ue500/src/os2.c:execprog(char *cmd)
  ue500/src/xp.c:execprog(char *cmd)
  ue500/src/xvtdos.c:int PASCAL NEAR execprog(cmd)

- Replace --- if possible --- `strncat' by `strlcat'.

- *Manually* analyze the remaining `sprintf', `xstrcpy' and `xstrcat'
  occurances.

- Identify functions which could be declared module local (`static')

- Sort eproto.h declarations and add platform specific sections therein.

- Create unduable versions of
  + filter-buffer
  + filter-region
  by these steps:
  + filter into a temporary buffer
  + kill-region in original buffer
  + copy-region in temporary buffer
  + yank-region in original buffer
  + kill temporary buffer.


[2023-09-06.00]

http://odl.sysworks.biz/disk$axpdocjun032/progtool/cpqc65/5492pidx.htm

Compaq C
User's Guide for OpenVMS Systems


<https://vmssoftware.com/docs/VSI_CRTL_REF.pdf>

VSI OpenVMS
VSI C Run-Time Library
Reference Manual for OpenVMS
Systems


[2023-09-17.00]

Some history:

* I enjoyed MicroEMACS since the 1994 --- then version 3.12 for MS-DOS;
  used it to type in the TeX code of my thesis.

* Daniel Michael Lawrence worked on MicroEMACS until 2009. His version
  5.00 was available on <https://www.aquest.com/emacs.htm> [Daniel
  Lawrence's MicroEMACS site].

* Daniel M. Lawrence passed away on June 7, 2010.

* Apr 12, 2017: Peter Chapman created the GitHub repository
  <https://github.com/pmachapman/memacs> "to collect the source code and
  binaries for MicroEMACS".

  He did some changes/improvements to be able to build MicroEMACS on
  Windows XP with recent Borland and Microsoft compilers.

* Aug 6, 2021: Peter Chapman's repository was copied by me (Joachim
  Schneider). First purpose was to get Daniels MicroEMACS running again
  on Linux and OpenBSD.


[2023-09-18.00]
With Compilation on AIX and the settings GCC = 0, UNIX = 1 we can
simulate a PROTO == 0, VARG == 1 system!


[2023-09-20.00]
With Compilation on Solaris and the settings GCC = 0, UNIX = 1 we can
simulate a PROTO == 0, VARG == 1 system!

And it works!


[2023-09-28.00]
Next Steps:
- unixansi.c ---> unix.c  (\/)
- ANSI: Send a SIGWINCH at startup to initialize or somehow after term.t_topen (in display.c).
        ===> Done (countdown loop in main.c) but not really understood.
- Remark in estruct.h that UNIX && ANSI *is* possible and avoids linking of termcap/terminfo/curses (\/)
- New platform `cygwin' in estruct.h                                                                (\/)
- Use "cywin: in cygwin                                                                             (\/)
- Change external and shell commands for cygwin in unix.c                                           (\/)
- Creatw a *.cmd to call emacs in cygwin
- A little documentation:
  + Use forward slashes with cygwin.
- Should .emacsrc be moved to emacs.rc (Similar to DOS) for cygwin?                                 (\/)
- Create two cygwin ports:  --- NO we only create ANSI                                              (\/)
  + cygwin/ncurses
  + cygwin/ansi     --- runs ouside of cygwin shell and does not need the ncurses-dll.              (\/)
- tempfile() does *not* work with cygwin in windows console! Therefor xvsnprintf fails! Steps needed:
  + implement gettmpfname() *without* xvsnprintf (using our `uitostr_memacs()')                     (\/)
  + Use mytempfile():                                                                               (\/)
    o tempfile() if not CYGWIN
    o Open a file using gettmpfname. Register an exitproc removing this file: No, "silllly delete"  (\/)
- Check again VA_COPY: Should `memcpy(&dst, &src, sizeof(dst)' not *always* be correct? NO!         (\/)


[2023-12-10.00]
Next Steps:
- access() and stat() in CYGWIN don't work with DOS-Paths: Create unx_access, unx_stat.             (\/)


[2023-12-28.00]
DJGPP-Port: (With DJDEV204)
Program received signal SIGSEGV, Segmentation fault.
0x0004ca2d in vbios_write_ch ()
(gdb) where
#0  0x0004ca2d in vbios_write_ch ()
#1  0x00049316 in __libc_termios_write_tty ()
#2  0x00049262 in __libc_termios_write ()
#3  0x00040752 in __write ()
#4  0x0002bde6 in ttflush () at ../src/unix.c:679
#5  0x00007df4 in update (force=0) at ../src/display.c:526
#6  0x0001cd2a in editloop () at ../src/main.c:562
#7  0x0001c449 in main (argc=1, argv=0xe02d0) at ../src/main.c:152
(gdb)

===> RESOLVED: The new (obviously since DJDEV204) termios-functions are
               very sensitive when writing outside of the screen area
               (maybee the write directly into video memory?).
               Decreasing NCOL by one in ansi.c resolved the problem!


[2023-12-29.00]
Search-string termination needs two (instead of one) <ESC>:
We have seen this error before when working on the ANSI terminal for UNIX:

...
 157 commit 69cc6eef9742564e1fc755bc82657da5802ef218
 158 Author: Dr. Joachim Schneider <jesmx@hal.rhein-neckar.de>
 159 Date:   Mon Oct 9 22:10:17 2023 +0200
 160
 161     Finally search string <META> works with CYGWIN
 162
 163 commit 638af231ef47e05322dec458602a4db0eddf050e
 164 Author: Dr. Joachim Schneider <jesmx@hal.rhein-neckar.de>
 165 Date:   Mon Oct 9 21:44:16 2023 +0200
 166
 167     CYGWIN: Use select instead of IOCTL to read with timeout.
 168
...
===> Fixed with `USE_TERMINAL_SELECT'


[2024-01-03.00]
Commit `0xb629cbc9cdfdf83be7c3e0c9d418caee7cd6b3a8' ("Fixed an error in
getnfile().") fixes a wrong evaluation of the struct stat st_mode
field:

The existing version implicitly assumed that the S_IFDIR and S_IFREG
flags have exactly one bit set.


[2024-01-04.00]
Fixed "ambigous redirect" error message of DJGPP's internal system()
when running in Windows 2000 by introducing additional qotes:

cmd /C COMMAND < IN > OUT 2> ERR
--->
cmd /C "COMMAND < IN > OUT 2> ERR"

A better solution will be to implement DJGPP's `dossystem()' via
spawn().
===> DONE


[2024-02-23.00]
For cygwin we include `windows.h' in `unix.c' but `windows.h' defines
PASCAL as `__attribute__((stdcall))' --- gcc gets confused at first
simply by seeing the differing prototypes in `eproto.h'. As `unix.c'
gets compiled only in the IS_UNIX() case we removed all `PASCAL *'
flags in `unix.c'. Of course this means that the prototypes in
`eproto.h' now *look* different to their implementations in `unix.c'.
===> REVERTED


[2024-02-24.00]
My previous remarks (2024-02-23.00/2024-02-23.01) about CyWin need to
be revisted:
- It *is* possible that
  $ cd c:/
  $ pwd
  gets '/' as output and *not* `/cygdrive/c'
  In this case one has these ads ---> enx conversions:

  C:\d1\d2\...\dn ---> /d1/d2/.../dn
    \d1\d2\...\dn ---> /d1/d2/.../dn
  X:\d1\d2\...\dn ---> ERROR

  and these enx ---> ads conversions:
  /d1/d2/.../dn ----> C:\d1\d2\...\dn

- CygWin WIN32 Functions:
  + Create an own source file
  + Then `PASCAL NEAR' can be restored.
  ===> Done

- Create an own system implementation using fork/exec --- yes that is
  supported by *all* CygWin versions.
  ===> Done


[2024-02-26.00]
When executing Emacs Help on too small terminals one gets en error
message caused by `set $pagelen 25': "%Screen size out of range" would
be useful but isn't displayed.
===> Done


[2024-03-01.00]
In DJGPP_port the `pipe-command' (bound to ^X-@) does not report errors
when executing non-existing commands but `filter-buffer' (bound to
^X-#) does.

===> But it does report errors when executed under Windows (2000): So
     this is a restriction of the DOS-Shell.


[2024-04-16.00]
Implemented spal() in smg.c (like in ansi.c): This makes adaptions of
the keymap via emacs.rc possible.


[2024-05-26.00]
Ideas for UTF8-Support:
- A modified form of the DBCS code could be a first proof of concept
  supporting the subset of UTF8 consisting of one and two byte
  characters.
- See also the handling of
  + $disphigh
  + OVER and REP modes


[2024-05-28.00]
Die Warnungen ueber die gtfun()-Funktion im untenstehenden Text beachten!

  <http://www.geonius.com/software/uemacs/index.html>

  MicroEMAC 3.9e Editor (DEC EDT Version)
  Introduction & Background
  Changes & Enhancements
  Mapping the PC/AT Keypad to the VT100 Keypad
  Files & Directories
  My .emacsrc File

  (Also see the original MicroEMACS 3.9e documents in the help directory;
  emacs-doc.txt is the full reference manual.)

  Download (uemacs-2021.tgz, 738K  -  uemacs-2021.zip, 814K)

  Last Update: Thu Nov 23 21:38:04 2023
  Introduction & Background

  This was MicroEMACS 3.9, written by Dave G. Conroy and substantially
  modified by Daniel M. Lawrence (with contributions from others). The
  last entry in the change log is dated November 4, 1987. The software
  was frozen for the version 3.9e USENET release according to the last
  log entry.

  In September 1987, I moved from 5 years of heavy VAX/VMS experience to
  a small prototype project using an early Sun M68K Unix workstation. One
  person used the workstation, two others used their PCs connected via
  serial lines, and I naturally gravitated to a DEC VT220 terminal (also
  connected via a serial line).

  I initially configured vi(1) to work like DEC's EDT editor (Wikipedia),
  mapping the VT220 keypad escape sequences to commands that would take
  VI out of insert mode if necessary and perform the commands equivalent
  to EDT's keypad functions. This made VI workable for me, but it still
  was just not the same as my heavily customized EDT (and then TPU in the
  last couple of VMS years).

  Note: I originally included the following paragraph here, but I just
  happened upon a comment dated January 4, 1988 about a change I made in
  estruct.h, so I must have downloaded MicroEMACS before getting a
  short-lived copy of UniPress EMACS. My memory is playing tricks on me!

  "As a subcontractor, I somehow convinced our contractor manager to buy
  a copy of UniPress EMACS. However, he was only willing to buy the
  binary for $300 and wouldn't splurge on the source code for $600 total.
  I went to town with EMACS Lisp and soon had my beloved editing
  environment once again. And then we got the first Sun SPARC workstation
  Goodbye, M68K EMACS!"

  Somehow I heard of MicroEMACS and downloaded the source code from
  Quantum Link's CP/M archive for the Commodore 128 or from GEnie
  (General Electric Network for Information Exchange).

  Quantum Link eventually became AOL. Speaking of the old pre-internet
  days, should I call EMACS by its original moniker, EMACS, or should I
  follow the not-so-new fad of calling it Emacs? UNIX Unix? FORTRAN
  Fortran? SNOBOL Spitbol? You tell me!

  I figure it cost me over $40 to obtain MicroEMACS. Both Q-Link and
  GEnie were run on corporate computers and hourly rates went up after
  7:00 or 8:00 in the morning. My 1200 baud download took longer than
  expected and I got socked with that $40 charge!

  Anyway, with some tweaking, I built MicroEMACS on our SPARCstation and
  I was back in business. As a result I've been using a heavily
  customized EDT editor since 1982, beginning with the EDIT/EDT editor
  itself and, since 1987, continuing with MicroEMACS!

  Customized how? I have included my EDT initialization file, edtini.edt,
  and my TPU file, eveini.tpu. The files have December 1993 dates
  because, in 1992-1993, I worked on a project for which we ported our
  SunOS software to VAX/VMS and I got to use EDT and TPU again.

  When I moved from EDT to TPU (in 1985?), I found DEC's TPU version of
  EDT too limited, so I instead used TPU's EVE editor with my own
  EDT-inspired customizations.

  When recently checking my MicroEMACS version of EDT against the DEC EDT
  reference manual (downloaded from the internet), I was struck by how
  incredibly awkward EDT's keypad method of substitution using "GOLD
  ENTER" was. Early on, I must have implemented my "GOLD s" method
  (possibly learned from another more experienced developer).

  HTML/PDF versions of the EDT, TPU, and EVE reference manuals can be
  found at https://www.digiater.nl/openvms/doc/alpha-v8.3/ (EDT's is PDF
  only).

  If you're reading this and using GNU Emacs, you might be interested in
  GNU's "Emacs EDT emulation" and/or tpu-edt.el. These seem to postdate
  my need for MicroEMACS (and would not have been easily accessible at
  the time in any case). Changes & Enhancements

  I added the following new macro commands:

      alx-center-line
      edt-delete-char
      edt-undelete-char
      edt-delete-bol
      edt-delete-eol
      edt-delete-line
      edt-undelete-line
      edt-delete-word
      edt-undelete-word
      edt-next-word

  I added the following function:

  &DRS wildcardFileSpec index

      Returns the I-th (1..N) file name that matches the wildcard file
      specification. Wildcards can only appear in the file name and not
      in the preceding directory names, if any. A blank string, "", is
      returned if no file names are matched or if the index is out of
      range.

      The result is stored locally in alx_drs() (found in alex.c), so it
      is a good idea to not use &DRS more than once in an expression. The
      result is stored as a dynamically allocated string, so there is no
      length limit as seen with the built-in ampersand string functions
      (see "Warnings About the Macro Language" below).

      (I originally modified the various file input functions in
      MicroEMACS's file.c to perform the wildcard matching internally.
      Circa 2001, I added the same functionality to JASSPA MicroEMACS for
      Windows by implementing the &DRS function. In June 2023, I figured
      I might as well use the same technique in this MicroEMACS.)

  I modified the following function:

  &CHR number

      Returns the character whose code is the specified number. This
      modification allows numbers to be specified in decimal, hexadecimal
      ("0x..."), and octal ("0...").

  I added the following macro environment variable:

  $curoff

      Byte offset (0..N-1) in the line of the current cursor position.
      Note that this is different than "$curcol", which takes into
      account tab settings and returns the cursor column as rendered on a
      virtual screen. For example, if the cursor is positioned on "a" in
      a line beginning with "^Iabc...", $curcol of "a" is 9 (its column
      on the screen) and $curoff is 1 (the offset in the line of "a"
      following the tab character). [READ ONLY]

  Additional software changes included bug fixes, expansion of predefined size limits, use of the termios(3) subsystem instead of the obsolete termio(7) subsystem, clean-up of some of the code, ...
  Warnings About the Macro Language

  My efforts debugging a somewhat complex "!if" expression revealed two
  implementation details of the MicroEMACS ampersand string functions
  that the user should be aware of:

      The ampersand string functions that manipulate and return strings
      store their results in the same, statically allocated buffer,
      result, in eval.c's gtfun() function. If more than one function
      using the result buffer appears in an expression, then the buffer
      will be unwittingly overwritten by intermediate values. The
      functions in question are:

      &CAT    &CHR    &GTK    &IND    &LEFT    &MID    &RIGHT

      To avoid conflicts, break the expression into smaller pieces and
      store intermediate values in user variables ("%name"). MicroEMACS
      stores the value of user variables in dynamically allocated
      strings. (The storage will be freed and allocated anew the next
      time the expression is evaluated.)

      The result buffer in gtfun() is of a fixed size, 2048 (2*NSTRING,
      where NSTRING is defined in estruct.h). Consequently, the results
      of the ampersand string functions are limited to 2047 characters.
      Exceeding this limit is entirely possible; for example, when
      manipulating a long line of text. (I have modified the functions to
      truncate results and not write past the end of the buffer.)

  Debug Output

  I added the ability to generate debug output to a file. First, the
  following global variables were added to edef.h:

      int  dbgIsOn ;  - 0 = debug off, ~0 = debug on
      FILE  *dbgFile ;  - Debug file, opened in mesetup() in "main.c"

  Second, the following command-line option was added to main.c:

      -dfile    - Enable debug and open "file" for debug output

  Debug output can then be generated wherever desired with:

      if (dbgIsOn)  fprintf (dbgFile, ...) ;

  Mapping the IBM PC/AT Keypad to the DEC VT100 Keypad

  My MicroEMACS configuration file, .emacsrc, currently depends on DEC
  VT1xx/VT2xx application mode keypad escape sequences. Ways to get these
  escape sequences from an IBM PC/AT keypad include:

      Under Windows, I use Tera Term to access (i) Cygwin on the host
      machine and (ii) Linux/BSD on a remote machine. The Tera Term
      keyboard setup file I use to map the PC keypad presses to VT escape
      sequences is:

      VT-ibm-keypad-teraterm-AlexEdt-CNF.txt

      Note that keycodes in the setup file are not Windows keycodes, but
      the values displayed by the keycode.exe program included in the
      Tera Term distribution. (See Tera Term Keyboard Setup for more
      information.)

      The connection to Cygwin on the host machine is accomplished using
      Tera Term's cygterm+ program in conjunction with Tera Term. See the
      "Command line" and "Setup files" entries in Tera Term's Help Index.

      I used to use an AutoHotkey script with Cygwin's mintty(1) terminal
      program under Windows 7 (and possibly under Windows XP before
      that?), but at some point it stopped working. I have included the
      AutoHotkey script in case someone else prefers to use it and can
      figure out the problem:

      VT-ibm-keypad-mintty-autohotkey.txt

      Under X Windows in Linux or BSD, I use xterm(1) and this xmodmap(1)
      keypad map file:

      VT-ibm-keypad-xterm-xmodmaprc.txt

      (The Xterm FAQ has more information.)

  With either of the two methods above, the VT keypad PF2 key is dropped
  and the PC keypad is mapped to the VT keypad as follows:

      Num Lock  ->  PF1 (the GOLD key!)
      /   ->  PF3
      *   ->  PF4
      -   ->  Keypad "-"
      +   ->  Keypad ","
      Enter ->  Keypad Enter
      .   ->  Keypad "."
      0 .. 9  ->  Keypad digits

  (PF2 in the EDT editor was the "help" key, which I never used.)

  Visually, the VT keypad keys are laid out on the PC keypad like this:

          .=====.=====.=====.=====.
          | PF1 | PF3 | PF4 |  -  |
          +=====+=====+=====+=====+
          |  7  |  8  |  9  |     |
          +=====+=====+=====+     |
          |  4  |  5  |  6  |  ,  |
          +=====+=====+=====+=====+
          |  1  |  2  |  3  |     |
          +=====+=====+=====+     |
          |  0        |  .  | Ent |
          `===========^=====^=====+

  In years long past, I did use other non-PC/AT keyboards on PCs and Unix
  computers and I successfully managed to mimic VT-style keypad use, even
  when there was no keypad! (You can see remnants of the handling of
  these keyboards in my .emacsrc file; I should probably clean that up
  someday.)

  Files & Directories

  README.txt

  .emacsrc    - My MicroEMACS configuration file, which depends on ...

        - ...  (See keypad section above)
  VT-ibm-keypad-mintty-autohotkey.txt
  VT-ibm-keypad-teraterm-AlexEdt-CNF.txt
  VT-ibm-keypad-xterm-xmodmaprc.txt

  VT-edtini-edt.txt - My EDT initialization file ("edtini.edt").
  VT-eveini-tpu.txt - My TPU initialization file ("eveini.tpu").

  Makefiles ("Using on ..." as of June 2023)

  Makefile.bsd    - Using on FreeBSD 13.2
  Makefile.cygwin   - Using on Cygwin64 (Windows 10)
  Makefile.linux    - Using on Linux Mint 20

  Files I Added to MicroEMACS Proper

  alex.c      - Original, c. 1988 EDT functions.

  eprotos.h   - ANSI C prototypes for all MicroEMACS C functions.

  Directory:  orig  - Original source for modified MicroEMACS files.
  Directory:  ots - on-the-shelf MicroEMACS code; i.e., not used.

  Files from My CSOFT LIBGPL Library

  These files are largely used to support my &drs function. Circa 1990,
  this functionality was implemented using only a few files, but this
  changed over the years as I reworked the code to be more generalized
  and more robust. Not to mention the fact that I ported MicroEMACS,
  again over the years, to UNIX (SunOS, HP/UX, Solaris, etc.), Linux,
  BSD, and Cygwin platforms. The LIBGPL code itself is portable to
  various systems including VAX/VMS and Windows Visual Studio 2022.

  pragmatics.h    - The hand-crafted equivalent of an autoconfig file.
  iel_util.h    - Simple debug logging and error reporting.
  aperror.c
  aperror.h

  drs_util.c    - Directory scanning package, which requires the
  drs_util.h      source files below, including the REX parser
  get_util.c      down through the UTF package.
  get_util.h
  meo_util.c
  meo_util.h
  nnl_util.c
  nnl_util.h

  rex_util_y.bison  - Regular expression parser and lexer for reference.
  rex_util_y.c    - Bisonized C code for the parser.
  rex_internals.c
  rex_internals.h
  rex_tokens.h
  rex_util.c    - Actual matching/sustitution code.
  rex_util.h

  sdx_util.c    - Handles dynamically growing strings in sustitution.
  sdx_util.h

  sto_util.c    - Length-limited S-to-N functions for the parser.
  sto_util.h
  sto_util_template.h

  str_util.c    - String manipulation functions.
  str_util.h
  utf_util.c    - UTF-8, -16, and -32 conversion functoins.
  utf_util.h

  MicroEMACS 3.9e Source Files (some have been modified)

  These files were part of the original MicroEMACS 3.9e distribution.

  Directory:  cmd - command stuff.
  Directory:  help  - help information.

  basic.c
  bind.c
  buffer.c
  crypt.c
  display.c
  ebind.h
  edef.h
  efunc.h
  epath.h
  estruct.h
  eval.c
  evar.h
  exec.c
  file.c
  fileio.c
  input.c
  isearch.c
  line.c
  main.c
  random.c
  region.c
  search.c
  spawn.c
  tcap.c
  termio.c
  window.c
  word.c

  My .emacsrc File
  Variables

      %edt-advance-forward  - Direction of EDT "next" movements:
            forward (TRUE) or reverse (FALSE).
      %edt-mark-is-active   - Is EDT's mark active?  (This is independent
            of the always active MicroEMACS mark.)
      %edt-paste-was-appended - Set to FALSE by EDT cut; set to TRUE by
            subsequent EDT replace(s).  Affects deletion
            of previous characters in append and paste.

      %edt-search-mode    - Cursor position after successful, forward
            EDT FIND/FNDNXT commands.  The default for
            MicroEMACS is to place the cursor after the
            last character in the match.  By setting
            this variable to "BEGIN", the cursor will
            be backed up to the beginning of the match.
            (The cursor will be advanced one character
            before searching for the next match.)

      %edt-name-buffer    - Names of various buffers.
      %my-name[-number]-buffer
      ...

  Named Buffers

      EDT-PASTE - EDT cut text is copied here for subsequent EDT pasting.
      EDT-DELETE  - Replaced text is copied here during EDT replace.

      ALTERNATE - Temporary buffers for whatever use by typist ...
      ALTERNATE/4
      ALTERNATE/5
      ALTERNATE/6
      ALTERNATE/7
      ALTERNATE/8
      ALTERNATE/9

  PC Keypad Key Bindings

  For completeness, in 2023, I added EDT functions RESET (GOLD DOT),
  APPEND (KP9), REPLACE (GOLD KP9), CTRL/U (delete to BOL), DEL EOL (GOLD
  KP2), LINE (KP0), and OPEN LINE (GOLD KP0). Since I have no memory of
  using these functions before, I implemented and tested them based
  solely on the descriptions in the EDT Reference Manual. I suggest you
  check them out to be sure they behave as you expect. I have not
  implemented SUBST (GOLD ENTER). (Yet, maybe?)

  Naming convention:

      GOLD  - PC NumLock, VT PF1 key
      PF3   - PC keypad "/"
      PF4   - PC keypad "*"
      MINUS - PC keypad "-"
      COMMA - PC keypad "+"
      ENTER - PC keypad "Enter"
      DOT   - PC keypad "."
      KP0..KP9  - PC keypad digits

  Actions (ordered by top row, right column, digits 7-9, 4-6, 1-3, and
  0). Actions tagged with "[DIRECTION]" work forwards or backwards
  depending on the %advance-forward setting, which is set/reset with
  KP4/KP5:

      GOLD PF3  - EDT prompt and search (FIND)
      PF3   - EDT search next (FNDNXT)

      PF4   - EDT delete line (DEL L)
      GOLD PF4  - EDT undelete line (UND L)

      MINUS - EDT delete word (DEL W)
      GOLD MINUS  - EDT undelete word (UND W)

      COMMA - EDT delete character (DEL C)
      GOLD COMMA  - EDT undelete character (UND C)

      ENTER - (Unimplemented: EDT ENTER)  Use keyboard's regular
        "Enter"/"Return" key to finish EDT FNDNXT and
        COMMAND (GOLD KP7) prompts.
      GOLD ENTER  - (Unimplemented: EDT SUBST)  I use "GOLD s",
        described below, to invoke MicroEMACS's own
        query-replace-string command.

      DOT   - EDT begin/cancel selection of text (SELECT)
        (Selected text is NOT highlighted.)
      GOLD DOT  - EDT reset selection and direction (RESET)

      KP7   - EDT next page (next form feed) (PAGE) [DIRECTION]
      GOLD KP7  - Prompt for and execute MicroEMACS named command.

      KP8   - EDT next section (scroll) (SECT) [DIRECTION]
      GOLD KP8  - EDT fill paragraph (FILL)

      KP9   - EDT append selection to paste buffer (APPEND)
      GOLD KP9  - EDT replace selection with paste buffer (REPLACE)

      KP4   - EDT set forward direction (ADVANCE)
      GOLD KP4  - EDT move to bottom of file (BOTTOM)

      KP5   - EDT set backward direction (BACKUP)
      GOLD KP5  - EDT move to top of file (TOP)

      KP6   - EDT cut selected text to PASTE buffer (CUT)
      GOLD KP6  - EDT paste text from PASTE buffer (PASTE)

      KP1   - EDT next word (but always move forward) (WORD)
        My variant.  Explanation by example:
        Given "while ((i > 0) && ...", the next word
        after "while" is the first left parenthesis,
        not "i".  And the next word after that is "i",
        not the second left parenthesis.
      GOLD KP1  - (Unimplemented: EDT change case in region)

      KP2   - EDT next line (but always move forward) (EOL)
      GOLD KP2  - EDT delete to end-of-line (DEL EOL)

      KP3   - EDT next character (but always move forward) (CHAR)
      GOLD KP3  - EDT insert special character (SPECINS)

      KP0   - EDT next beginning of line (LINE) [DIRECTION]
      GOLD KP0  - EDT open line (OPEN LINE)

  Non-Keypad Key Bindings

      GOLD k  - Begin keyboard macro
      ^K    - End keyboard macro
      ^E    - Execute keyboard macro

      ^A    - Insert line of asterisks

      ^I    - Insert 4 spaces (NOT a tab)
      GOLD t  - Insert genuine tab character

      ^L    - EDT insert form feed (CTRL/L)
      ^N    - Insert number line (useful for positioning text)
      ^R    - EDT refresh editor screen (CTRL/R)

      ^U    - Use "GOLD u" for EDT CTRL/U (delete from beginning-of-line)

      GOLD m  - Switch to main buffer
      GOLD p  - Switch to EDT CUT's "PASTE" buffer
      GOLD D  - Switch to EDT REPLACE's "DELETE" buffer.
      GOLD a  - Switch to "ALTERNATE" buffer
      GOLD 4  - Switch to "ALTERNATE/4" buffer
      GOLD 5  - Switch to "ALTERNATE/5" buffer
      GOLD 6  - Switch to "ALTERNATE/6" buffer
      GOLD 7  - Switch to "ALTERNATE/7" buffer
      GOLD 8  - Switch to "ALTERNATE/8" buffer
      GOLD 9  - Switch to "ALTERNATE/9" buffer

      GOLD 1  - Return to one window in editor
      GOLD 2  - Split current window vertically
      GOLD `  - Switch cursor to next window

      GOLD "  - Convert smart quotes, etc. to ASCII characters
      GOLD M  - Convert CR/LF to LF (CR=^M)

      GOLD b  - Bottom of buffer
      GOLD B  - Prompt for and switch to another buffer

      GOLD c  - Prompt for and insert control (A-Z) character
      GOLD C  - Center current line

      GOLD d  - Delete (not cut) current selection
      GOLD D  - Generate directory listing

      GOLD e  - Save file and exit MicroEMACS
      GOLD q  - Quit MicroEMACS without saving

      GOLD f  - Go to matching fence (e.g., braces, brackets, etc.)
      GOLD F  - Prompt for and set fill paragraph width

      GOLD g  - Prompt for and go to line in file
      GOLD G  - Get (open) another file for editing

      GOLD i  - Prompt for and insert contents of a file
      GOLD I  - Toggle insert mode

      GOLD j  - Join paragraph (multi-line to single-line)

      GOLD l  - Display current line number
      GOLD L  - Prompt for and execute MicroEMACS command file

      GOLD r  - Prompt/interactive substitution (with regular expression)
      GOLD s  - Prompt/interactive substitution (without regular expression)

      GOLD T  - Trim trailing blanks from all lines in buffer

      GOLD u  - EDT delete from beginning-of-line (CTRL/U)

      GOLD U  - Expand tabs to 4 spaces

      GOLD w  - Prompt for and write current buffer to file

      GOLD x  - Prompt for and edit one or more shell commands.
        When the commands are ready, press "GOLD x" again
        to execute the shell commands and then switch to
        the shell output buffer.

      GOLD X  - Creates and drops you into a shell subprocess.
        This is NOT in an editor window.  Enter shell
        command "exit" to return back to the editor.

      GOLD z  - Insert 3-byte UTF-8 BOM
      GOLD Z  - Remove 3-byte UTF-8 BOM

  Alex Measday  /  E-mail


[2024-10-06.00]

This Repository contains a MicroMemacs which compiles and runs un
UNIX-V7:

  https://github.com/athornton/microemacs-v7.git

Use it to compile this version on V7.



#============================== TODO LIST ==============================

- Understand hilite/highlight Code in edef.h, display.c, eval.c mouse.c, search.c
- Check if Palette settings are applicable to ANSI.
- grabnowait(): Change it to return int and return grabnowait_TIMEOUT == (-1) on
  timeout: This allows 0xFF to be used as text character.
- Line-Numbers in Macro-Errormessages do *not* include empty or comment lines.
- Include something like '-Wnounused-result' in WARNFLAGS
- Linux ANSI does use one column less then possible on the screen.
- After `Ctrl-X,C' screen-resizing does not work any more.
- Modify PROMPT for the `Ctrl-X,C'-shell.
- Move the (duplicated) qin(), qrep() functions into keyboard.c.
- VMS: test __NEW_STARLET feature.
- Do a `git bisect' to find out why we substituted `CTRF' for `CTRL'.
- The variable $abcap :<==>: ab_cap is ignored.
- At some places the code depends on one's complement representation of
  characters and/or integers, e.g. when using

    (unsigned char)(-1) + 1

  as the total number of characters (e.g. 256):

  + Either introduce a CASRT for One-Complement, or
  + use other constructs.

  Of course this is relevant only for platforms we currently
  cannot test.


# EOF
